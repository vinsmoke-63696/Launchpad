1. New -> A thread is in this state when it is created but not yet started
2. Runnable -> After the start method is called, the thread becomes runnable. It's ready to run and is waiting for CPU time
3. Running -> The thread is in this state when it is executing
4. Blocked/Waiting -> A thread is in state when it is waiting for resource or for another thread to perform an application
5. Terminated -> A thread is in this state when it has finished executing


Thread and Runnable both can be used to create thread. but when to use what ? 

If class A is already extending class B and you want to create thread for class A, you can't write
public class A extends B, Thread{} -> Compiler error, multiple inheritance not supported.

So you have to use Runnable here
public class A extends B implements Runnable{} 

---------------------------------------------------------------------------------
Bonus Tip :- Thread class itself implements Runnable Interface
---------------------------------------------------------------------------------
Methods -> 

sleep, run, start, interrupt (interrupts given state of thread), 
yeild (hints scheduler that current thread is willing to yeild its current use of processor. scheduler is free to ignore this hint )
setDaemon (background thread -> JVM does not wait for completion of the daemon thread )

==================================================================================

Synchronized method or Synchronized block 
    -> Intrinsic locking, easy to use, just keywords, Lock is automatically released when thread exits the Synchronized method
     or block, even if an exception occurs.
    -> No try-lock, there is blocking, if say first thread is taking longer to exit Synchronized block, all the following threads
     are going to wait. This is not good.
    -> you can't specify a timeout for acquiring a lock 