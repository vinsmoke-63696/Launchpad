1. Nature of interface
    1.  Abstract by Nature
    2.  Pure Abstraction (Pre-java 8)
    3.  Cannot be instantiated
    4.  Achieves Multiple Inheritance
    5.  Supports Polymorphism
    6.  Flexibility in Implementation
    7.  Default and Static Methods (java 8+)
    8.  Supports Private Methods (java 9+)
    9.  Promotes Loose Coupling
    10. Supports Functional Programming
    11. Inheritance in interface
    12. Contracts for Behavior
    13. Used in Java Frameworks - list, map, set

================================================================

5. Supports Polymorphism -> 
    Interface vehicle { void buildCar();}  -> class Nano implements vehicle { public void buildCar(){sout("Nano built")}}
                                           -> class Sumo implements vehicle { public void buildCar(){sout("Sumo built")}}

    1. Vehicle is used as a "reference type" for Nano and Sumo. meaning it can hold the objects for class that implements it.
    2. Dynamic behavior -> Even though reference type is vehicle. The Actual method is executed based on runtime execution.

===============================================================

7. Default methods helped in backward compatibility and providing default behavior in classes implementing the interface.
    practical use case -> When forEach() was introduced in java 8 as part of stream API. previous interfaces such as
    Collection, Set would break because as soon as forEach() was added, the classes that implemented Collection or Set 
    would also required or forced to provide Implementation of forEach().
    To avoid this, forEach was introduced as a Default Method. so classes that implemented Collection or Set did not need to
    write Implementation of forEach(). Instead if needed those classes could override the forEach method as per their need.

    By having default method, This makes it easier to evolve interfaces over time while maintaining compatibility with older code

