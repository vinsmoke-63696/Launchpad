Threads allows a program to operate more efficiently by doing multiple things at same time. Can be used to performs
complicated tasks in the background without interupting main program.

1. Types of threads.
2. Tools for thread management.
3. Challanges in threading.

=============================================================================================

Types of threads in java 
1. Based on Origin :
    1. User Thread -> created by application developer, managed by JVM, can perform application level tasks.
    2. Daemon Thread -> background thread that supports other threads, eg. Garbage collector, watchdog.

2. Based on Purpose :
    1. Worker thread -> performs specific task in thread pool. Eg. executors, managed by frameworks like ExecutorService.
    2. Main thread -> application thread or primary thread, starts the main(String[] args) method.
    3. I/O thread -> Dedicated to handle I/O operations, useful in non-blocking i/o. eg. Java.nio package.

3. Based on Lifecycle :
    1. Short lived thread -> Can perform single task and terminate.
    2. Long lived thread -> Remain active for longer Duration.

Based on Priority :
    1. Ranges from 1 to 10, where 1 = MIN_PRIORITY and 10 = MAX_PRIORITY

=============================================================================================

Tools for thread management

1. Thread class  -> Extend any class with Thread and write implimentation of run() method
        Methods :
            start() -> Starts new thread and invoke run() method
            run() -> contains the code to execute in a new thread
            join() -> waits for the thread t complete
            sleep(milliseconds) -> causes thread to sleep for given milliseconds
            interrupt() -> interrupts a thread, signaling it to stop.

2. Runnable Interface -> functional interface represents a task to execute. Pass the runnable object to the thread object as a task.

        Class ClassName {
            Runnable task = () -> {sout("task is running")};
        }
        main(){
            ClassName instance = new ClassName();
            Thread t1 = new Thread(instance.task);
            t1.start();
        }

Executor 
    Executor interface acts as a replacement for 'new Thread()' for executing task.
    Providers single method 'void execute(Runnable command)'

ExecutorService
    Extends Executor, has more Methods
    1. submit() -> submit task and allow retriving result using Future object
    2. invokeAll(), invokeAny() -> for batch processing
    3. shutdown(), shutdownNow() -> graceful shutdown

Thread pool implimentation with executor ExecutorService
    1. fixedThreadPool(n) -> fixed number of threads, used for steady workload
            ExecutorService threadPool = Executors.newFixedThreadPool(3);     

    2. cachedThreadPool() -> dynamic number of threads, used for short-lived, I/O bound tasks where task number is highly variable
            ExecutorService threadPool = Executors.newCachedThreadPool();
    
    3. singleThreadExecutor() -> thread pool with single thread, sequential processing, thread safety
            ExecutorService threadPool = Executors.newSingleThreadExecutor();

    4. scheduledThreadPoo() -> thread pool that runs task periodically or after delay, cron jobs, recurring tasks
            ExecutorService threadPool = Executors.bewScheduledThreadPoo();
             